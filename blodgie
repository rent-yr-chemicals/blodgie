#!/usr/bin/python3

import sys
import sqlite3
import requests
import os.path
import argparse
import geopy.distance
from collections import namedtuple
from time import time

import ikea_api as api
from tabulate import tabulate

Product = namedtuple('Product', ['itemNo', 'name', 'nameAlternate', 'description'])

BLODGIE = Product('90373590','Blodgie','Bl\u00E5haj', 'Soft toy, shark, 39 \u00BC inches')
SMOL_BLODGIE = Product('70540665', 'Smol Blodgie', 'Bl\u00E5haj', 'Soft toy, baby shark, 21 \u00BE inches')

STORES = 'https://www.ikea.com/us/en/meta-data/navigation/stores-detailed.json'

API_CONSTANTS = {
    'country': 'us',
    'language': 'en',
}

BLUSH = '\U0001f633'
CRY = '\U0001f62d'
BOTTOM = '\U0001f97a'
BOTTOM_HANDS= '\U0001f449\U0001f448'

class NestedDict(object):

    def __init__(self, data):
        self._data = data

    def __getitem__(self, keys):
        data = self._data
        for key in keys:
            try:
                data = data[key]
            except KeyError:
                return None
        return data

class InventoryTracker(object):

    constants = api.Constants(**API_CONSTANTS)
    stock = api.Stock(constants)

    def __init__(self, path, lat=0, lng=0):

        self.db_path = path
        self.con = None
        self.cur = None
        self.lat = lat
        self.lng = lng
        self.time = None
        self.new_session()

        need_initialize = not os.path.isfile(self.db_path) or self.db_path == ':memory:'

        self.connect()

        if need_initialize:
            self.initialize_db()

    def __del__(self):

        self.con.close()

    def connect(self):

        self.con = sqlite3.connect(self.db_path)
        self.cur = self.con.cursor()
        self.con.create_function('distance', 2, self.distance_function())

    def initialize_db(self):

        cmd = '''
        BEGIN;

        CREATE TABLE stores(
            storeId TEXT PRIMARY KEY NOT NULL,
            storeName TEXT,
            displayName TEXT,
            displayNameAlternate TEXT,
            displayAddress TEXT,
            street TEXT,
            city TEXT,
            stateProvinceCode TEXT,
            zipCode TEXT,
            lat REAL,
            lng REAL,
            timezone TEXT,
            buClassificationName TEXT,
            buClassificationCode TEXT
        );

        CREATE TABLE availabilities(
            storeId TEXT NOT NULL,
            classUnitType TEXT,
            timestamp TEXT,
            sessionTimestamp REAL,
            updateDateTime TEXT,
            quantity INTEGER,
            itemType TEXT,
            itemNo TEXT NOT NULL,
            PRIMARY KEY (storeId, itemNo, timestamp)
        );

        CREATE TABLE products(
            itemNo TEXT PRIMARY KEY NOT NULL,
            productName TEXT,
            productNameAlternate TEXT,
            description TEXT
        );

        CREATE VIEW results_detailed AS
        SELECT
            s.*,
            a.classUnitType,
            a.timestamp,
            a.sessionTimestamp,
            a.updateDateTime,
            a.quantity,
            a.itemType,
            p.*
        FROM
            stores AS s
            JOIN availabilities AS a
                ON s.storeId = a.storeId
            JOIN products AS p
                ON p.itemNo = a.itemNo
        ;

        CREATE VIEW results AS
        SELECT
            b.displayName AS Name,
            b.city AS City,
            b.stateProvinceCode AS State,
            distance(b.lat, b.lng) AS "Distance (mi)",
            (CASE WHEN b.quantity = 0 THEN "{}" ELSE b.quantity END) AS Blodgie,
            datetime(b.updateDateTime, "localtime") AS "Last Update (Blodgie)",
            (CASE WHEN s.quantity = 0 THEN "{}" ELSE s.quantity END) AS "Smol Blodgie",
            datetime(s.updateDateTime, "localtime") AS "Last Update (Smol Blodgie)"
        FROM 
            (SELECT * FROM results_detailed WHERE productName = "Blodgie")
            AS b
        JOIN
            (SELECT * FROM results_detailed WHERE productName = "Smol Blodgie")
            AS s
        ON
            b.storeId = s.storeId AND b.sessionTimestamp = s.sessionTimestamp
        ;

        COMMIT;
        '''.format(CRY, CRY)

        # CAST(strftime("%s", b.timestamp) AS INT) - CAST(strftime("%s", s.timestamp) AS INT) <= 2

        self.cur.executescript(cmd)
        self.con.commit()

        self.initialize_products()
        self.initialize_stores()

    def initialize_products(self):

        self.cur.executemany('INSERT INTO products VALUES (?, ?, ?, ?)', [BLODGIE, SMOL_BLODGIE])
        self.con.commit()

    def initialize_stores(self):

        response = requests.get(STORES).json()

        stores = []

        for store in response:
            store = NestedDict(store)
            entry = (
                store[('id',)],
                store[('name',)],
                store[('displayName',)],
                store[('displayNameAlternate',)],
                store[('address', 'displayAddress')],
                store[('address', 'street')],
                store[('address', 'city')],
                store[('address', 'stateProvinceCode')][2:],
                store[('address', 'zipCode')],
                store[('lat',)],
                store[('lng',)],
                store[('address', 'timezone')],
                store[('buClassification', 'code')],
                store[('buClassification', 'name')]
            )
            stores.append(entry)

        self.cur.executemany('INSERT INTO stores VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', stores)
        self.con.commit()

    def get_availability(self, product_id):

        endpoint = self.stock.get_stock(product_id)
        response = api.run(endpoint)

        stores = []

        for store in response['availabilities']:
            store = NestedDict(store)
            entry = (
                store[('classUnitKey', 'classUnitCode')],
                store[('classUnitKey', 'classUnitType')],
                response['timestamp'],
                self.time,
                store[('buyingOption', 'cashCarry', 'availability', 'updateDateTime')],
                store[('buyingOption', 'cashCarry', 'availability', 'quantity')] or 0,
                store[('itemKey', 'itemType')],
                store[('itemKey', 'itemNo')]
            )
            stores.append(entry)

        self.cur.executemany('INSERT INTO availabilities VALUES (?, ?, ?, ?, ?, ?, ?, ?)', stores)
        self.con.commit()

    def new_session(self):
        self.time = time()

    def columns(self, query=None, values=None):

        if query is not None:
            if values is not None:
                self.cur.execute(query, values)
            else:
                self.cur.execute(query)

        return tuple(column[0] for column in self.cur.description)

    def print(self, query, values=None):

        if values is not None:
            results = self.cur.execute(query, values).fetchall()
        else:
            results = self.cur.execute(query).fetchall()

        columns = self.columns()
        aligns = ['right' if column in ['Blodgie', 'Smol Blodgie', 'Distance (mi)'] else 'left' for column in columns]
        
        if not results:
            results = [(None for _ in columns)]
        
        table = tabulate(
            results,
            headers=columns,
            colalign=aligns,
            floatfmt='.2f'
        )

        print()
        print(table)
        print()

    def set_location(self, lat, lng):
        self.lat = lat
        self.lng = lng

    def distance_function(self):

        def distance(lat, lng):
            return geopy.distance.distance((lat, lng), (self.lat, self.lng)).mi

        return distance

def main():
    args = parser.parse_args()
    tracker = InventoryTracker(args.database, lat=args.lat, lng=args.lng)
    if args.update or args.database == ':memory:':
        tracker.new_session()
        tracker.get_availability(BLODGIE.itemNo)
        tracker.get_availability(SMOL_BLODGIE.itemNo)
    if not args.quiet:
        tracker.print(args.query)

parser = argparse.ArgumentParser(
    prog=f'blodgie',
    description=f'Where is Blodgie? {BOTTOM}{BOTTOM_HANDS}\n\nDefault behavior is equivalent to blodgie -d ":memory:" -q "SELECT * FROM results"',
)

parser.add_argument('-Q', '--quiet',
    action='store_true',
    help='Run and exit without displaying any output. If neither -u nor -d is provided, program will exit without having any effect.'
)

parser.add_argument('-u', '--update',
    action='store_true',
    help='Update the database with the most recent data available from inventory servers.'
)

parser.add_argument('-d', '--database',
    default=':memory:',
    metavar='PATH',
    help='Path to an SQLite database in which to store results; if a database does not already exist at PATH, one will be created. When option is not provided, a temporary database will be created in memory, but will not be saved upon exiting.'
)

parser.add_argument('-q', '--query',
    default='SELECT * FROM results',
    metavar='SQL',
    help='Any valid SQL query, to be used for selecting which results to display. (Default: "SELECT * FROM results")'
)

parser.add_argument('-l', '--lat',
    default=0,
    metavar='LATITUDE',
    help='Latitude of the starting location when computing distance from the user.'
)

parser.add_argument('-L', '--lng',
    default=0,
    metavar='LONGITUDE',
    help='Longitude of the starting location when computing distance from the user.'
)

parser.add_argument('-v', '--version', action='version', version='%(prog)s version 0.1312')

if __name__ == '__main__':
    main()